class Breathalyzer
  def initialize
    @dictionary = Index.new
  end
  
  def check_word(word)
    if @dictionary.valid_word?(word)
      0
    else
      change(word)
    end
  end
  
  def change(word)
    difference = try_remove_character(word)
    if difference
      return difference
    else
      difference = try_add_character(word)
      if difference
        return difference
      else
        difference = try_replace_character(word)
        if difference
          return difference
        else
          (0..(word.length-1)).each do |i|
            if difference = change(word[0..i-1]+word[i+1..(word.length-1)])
              return difference
            end
          end
          word.split("").each_with_index do |c, i|
            ('a'..'z').each do |alpha|
              new_word = word.dup
              new_word.insert(i, alpha)
              if difference = change(new_word)
                return difference
              end
            end
          end
          word.split("").each_with_index do |c, i|
            ('a'..'z').each do |alpha|
              if c != alpha
                new_word = word.dup
                new_word = new_word[0...i]+alpha+new_word[i+1...new_word.length]
                if difference = change(new_word)
                  return difference
                end
              end
            end
          end          
        end
      end
    end
  end
  
  def try_remove_character(word)
    (0..(word.length-1)).each do |i|
      if @dictionary.valid_word?(word[0..i-1]+word[i+1..(word.length-1)])
        return 1
      end
    end
    return nil
  end
  
  def try_add_character(word)
    word.split("").each_with_index do |c, i|
      ('a'..'z').each do |alpha|
        new_word = word.dup
        new_word.insert(i, alpha)
        if @dictionary.valid_word?(new_word)
          return 1
        end
      end
    end
    return nil
  end
  
  def try_replace_character(word)
    word.split("").each_with_index do |c, i|
      ('a'..'z').each do |alpha|
        if c != alpha
          new_word = word.dup
          new_word = new_word[0...i]+alpha+new_word[i+1...new_word.length]
          if @dictionary.valid_word?(new_word)
            return 1
          end
        end
      end
    end
    return nil    
  end
end
